(self.webpackChunksite=self.webpackChunksite||[]).push([[5957],{45957:function(n,r,e){"use strict";e.r(r),r.default="# Pull 上拉加载下拉刷新\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Pull, Cell, Message, Icon, Button, ActivityIndicator, BackToTop } from 'zson-mobile';\r\n\r\nconst REFRESH_STATE = {\r\n  normal: 0, // 普通\r\n  pull: 1, // 下拉刷新（未满足刷新条件）\r\n  drop: 2, // 释放立即刷新（满足刷新条件）\r\n  loading: 3, // 加载中\r\n  success: 4, // 加载成功\r\n  failure: 5, // 加载失败\r\n};\r\n\r\nconst LOAD_STATE = {\r\n  normal: 0, // 普通\r\n  abort: 1, // 中止\r\n  loading: 2, // 加载中\r\n  success: 3, // 加载成功\r\n  failure: 4, // 加载失败\r\n  complete: 5, // 加载完成（无新数据）\r\n};\r\n\r\nconst getRandomNum = (min, max) => {\r\n  const Range = max - min;\r\n  const Rand = Math.random();\r\n  return min + Math.round(Rand * Range);\r\n};\r\n\r\nconst fetchData = (length, dataSource = []) => {\r\n  let newData = [].concat(dataSource);\r\n  const startIndex = newData.length;\r\n  for (let i = startIndex; i < startIndex + length; i++) {\r\n    newData.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\r\n  }\r\n  return newData;\r\n};\r\n\r\nlet mounted = true;\r\n\r\nconst Demo = () => {\r\n  const pullRef = useRef();\r\n  const [bodyScroll, setBodyScroll] = useState(false);\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [refreshing, setRefreshing] = useState(REFRESH_STATE.normal);\r\n  const [loading, setLoading] = useState(LOAD_STATE.normal);\r\n\r\n  const toggleScrollContainer = () => {\r\n    const newBodyScroll = !bodyScroll;\r\n    setBodyScroll(newBodyScroll);\r\n\r\n    if (newBodyScroll) {\r\n      document.body.style.overflow = 'auto';\r\n    } else {\r\n      document.body.style.overflow = 'hidden';\r\n    }\r\n  };\r\n\r\n  // 模拟请求数据\r\n  const refreshData = () => {\r\n    setRefreshing(REFRESH_STATE.loading);\r\n    setTimeout(() => {\r\n      if (!mounted) return;\r\n      setDataSource(fetchData(20));\r\n      setRefreshing(REFRESH_STATE.success);\r\n    }, 2000);\r\n  };\r\n\r\n  // 模拟加载更多数据\r\n  const loadData = () => {\r\n    setLoading(LOAD_STATE.loading);\r\n    setTimeout(() => {\r\n      if (!mounted) return;\r\n\r\n      const randomNum = getRandomNum(0, 5);\r\n      console.log(`状态: ${randomNum === 0 ? '失败' : randomNum === 1 ? '完成' : '成功'}`);\r\n\r\n      let loadingState = LOAD_STATE.success;\r\n      if (randomNum === 0) {\r\n        loadingState = LOAD_STATE.failure;\r\n      } else if (randomNum === 1) {\r\n        loadingState = LOAD_STATE.complete;\r\n      } else {\r\n        setDataSource(fetchData(20, dataSource));\r\n      }\r\n\r\n      setLoading(loadingState);\r\n    }, 2000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDataSource(fetchData(20));\r\n\r\n    return () => {\r\n      mounted = false;\r\n      document.body.style.overflow = 'auto';\r\n    };\r\n  }, []);\r\n\r\n  const style = bodyScroll ? {} : { overflowY: 'auto', maxHeight: 400 };\r\n\r\n  const scrollContainer = () => {\r\n    return bodyScroll ? window : pullRef.current && pullRef.current.scrollContainer;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Message theme=\"warning\" icon={<Icon type=\"warning-round\" />}>\r\n        当前使用的是 `{bodyScroll ? 'window' : 'div'}` 作为滚动容器。\r\n        <Button theme=\"primary\" size=\"xs\" onClick={toggleScrollContainer}>\r\n          点击切换\r\n        </Button>\r\n      </Message>\r\n      <Pull\r\n        ref={pullRef}\r\n        style={style}\r\n        refresh={{\r\n          state: refreshing,\r\n          handler: refreshData,\r\n          // render: (refreshState, percent) => {\r\n          //   const cls = 'custom-control';\r\n          //   switch (refreshState) {\r\n          //     case REFRESH_STATE.pull:\r\n          //       return (\r\n          //         <div className={cls}>\r\n          //           <ActivityIndicator loading={false} percent={percent} />\r\n          //           <span>下拉刷新</span>\r\n          //         </div>\r\n          //       );\r\n\r\n          //     case REFRESH_STATE.drop:\r\n          //       return (\r\n          //         <div className={cls}>\r\n          //           <ActivityIndicator loading={false} percent={100} />\r\n          //           <span>释放立即刷新</span>\r\n          //         </div>\r\n          //       );\r\n\r\n          //     case REFRESH_STATE.loading:\r\n          //       return (\r\n          //         <div className={cls}>\r\n          //           <ActivityIndicator type=\"spinner\" />\r\n          //           <span>加载中</span>\r\n          //         </div>\r\n          //       );\r\n\r\n          //     case REFRESH_STATE.success:\r\n          //       return (\r\n          //         <div className={cls}>\r\n          //           <Icon type=\"right-round\" theme=\"success\" />\r\n          //           <span>加载成功</span>\r\n          //         </div>\r\n          //       );\r\n\r\n          //     case REFRESH_STATE.failure:\r\n          //       return (\r\n          //         <div className={cls}>\r\n          //           <Icon type=\"wrong-round\" theme=\"danger\" />\r\n          //           <span>加载失败</span>\r\n          //         </div>\r\n          //       );\r\n\r\n          //     default:\r\n          //   }\r\n          // },\r\n        }}\r\n        load={{\r\n          state: loading,\r\n          distance: 200,\r\n          handler: loadData,\r\n          // render: (loadState) => {\r\n          //   const cls = 'custom-control';\r\n          //   switch (loadState) {\r\n          //     case LOAD_STATE.loading:\r\n          //       return <div className={cls}><ActivityIndicator type=\"spinner\" /></div>;\r\n\r\n          //     case LOAD_STATE.failure:\r\n          //       return <div className={cls}>加载失败</div>;\r\n\r\n          //     case LOAD_STATE.complete:\r\n          //       return <div className={cls}>我是有底线的</div>;\r\n          //   }\r\n          // },\r\n        }}\r\n      >\r\n        {dataSource}\r\n      </Pull>\r\n      <BackToTop scrollContainer={scrollContainer} onClick={() => console.log('click back to top')}>\r\n        <div\r\n          style={{\r\n            width: 60,\r\n            height: 60,\r\n            lineHeight: '60px',\r\n            textAlign: 'center',\r\n            backgroundColor: '#fff',\r\n            color: '#999',\r\n            fontSize: 20,\r\n            borderRadius: 30,\r\n            boxShadow: '0 2px 10px 0 rgba(0, 0, 0, 0.2)',\r\n            cursor: 'pointer',\r\n          }}\r\n        >\r\n          Up\r\n        </div>\r\n      </BackToTop>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性              | 类型   | 默认值 | 说明                     |\r\n| :---------------- | :----- | :----- | :----------------------- |\r\n| refresh           | Action | -      | 下拉刷新的参数配置       |\r\n| load              | Action | -      | 上拉加载的参数配置       |\r\n| animationDuration | number | 400    | 动画执行时间，单位：毫秒 |\r\n| stayTime          | number | 1000   | 加载成功停留时间         |\r\n\r\n### Action 类型定义\r\n\r\n| 属性          | 类型                                                                          | 默认值 | 说明                                                                  |\r\n| :------------ | :---------------------------------------------------------------------------- | :----- | :-------------------------------------------------------------------- |\r\n| state         | REFRESH_STATE &#124; LOAD_STATE                                               | 0      | 状态枚举                                                              |\r\n| startDistance | number                                                                        | 30     | 下拉时的助跑距离，单位：px                                            |\r\n| distance      | number                                                                        | 30     | 触发距离阀值，单位：px；下拉刷新阀值默认为 30px，上拉加载阀值默认为 0 |\r\n| render        | (refreshState: REFRESH_STATE &#124; LOAD_STATE, percent: number) => ReactNode | -      | 各状态渲染的回调函数                                                  |\r\n| handler       | () => void                                                                    | -      | 达到阀值后释放触发的回调函数                                          |\r\n\r\n### REFRESH_STATE 枚举定义\r\n\r\n| 枚举值  | 说明                         |\r\n| :------ | :--------------------------- |\r\n| normal  | 普通状态                     |\r\n| pull    | 下拉状态（未满足刷新条件）   |\r\n| drop    | 释放立即刷新（满足刷新条件） |\r\n| loading | 加载中                       |\r\n| success | 加载成功                     |\r\n| failure | 加载失败                     |\r\n\r\n### LOAD_STATE 枚举定义\r\n\r\n| 枚举值   | 说明     |\r\n| :------- | :------- |\r\n| normal   | 普通状态 |\r\n| abort    | 终止状态 |\r\n| loading  | 加载中   |\r\n| success  | 加载成功 |\r\n| failure  | 加载失败 |\r\n| complete | 加载完成 |\r\n"}}]);