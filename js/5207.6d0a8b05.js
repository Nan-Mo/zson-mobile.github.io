(self.webpackChunksite=self.webpackChunksite||[]).push([[5207],{15207:function(r,n,t){"use strict";t.r(n),n.default="# Popper 气泡层\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { Cell, Button, Popper, Select } from 'zson-mobile';\r\n\r\nconst Demo = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [direction, setDirection] = useState('top');\r\n  const [trigger, setTrigger] = useState('click');\r\n  const [animationType, setAnimationType] = useState('zoomFade');\r\n\r\n  return (\r\n    <>\r\n      <Cell className=\"basic-demo\">\r\n        <Popper\r\n          content=\"我是气泡层的内容\"\r\n          destroy={false}\r\n          visible={visible}\r\n          trigger={trigger}\r\n          direction={direction}\r\n          animationType={animationType}\r\n          className=\"custom-content\"\r\n        >\r\n          <Button\r\n            theme=\"primary\"\r\n            size=\"xs\"\r\n            onClick={() => trigger === 'manual' && setVisible(!visible)}\r\n          >\r\n            点击{visible ? '隐藏' : '显示'}\r\n          </Button>\r\n        </Popper>\r\n      </Cell>\r\n      <Cell title=\"显示方向\">\r\n        <Select\r\n          value={direction}\r\n          dataSource={[\r\n            { value: 'topLeft', label: 'topLeft' },\r\n            { value: 'top', label: 'top' },\r\n            { value: 'topRight', label: 'topRight' },\r\n            { value: 'rightTop', label: 'rightTop' },\r\n            { value: 'right', label: 'right' },\r\n            { value: 'rightBottom', label: 'rightBottom' },\r\n            { value: 'bottomLeft', label: 'bottomLeft' },\r\n            { value: 'bottom', label: 'bottom' },\r\n            { value: 'bottomRight', label: 'bottomRight' },\r\n            { value: 'leftTop', label: 'leftTop' },\r\n            { value: 'left', label: 'left' },\r\n            { value: 'leftBottom', label: 'leftBottom' },\r\n          ]}\r\n          onOk={(selected) => setDirection(selected[0].value)}\r\n        />\r\n      </Cell>\r\n      <Cell title=\"动画效果\">\r\n        <Select\r\n          value={animationType}\r\n          dataSource={[\r\n            { value: 'zoomFade', label: '缩放渐显(zoomFade)' },\r\n            { value: 'menuSlide', label: '菜单拉伸(menuSlide)' },\r\n            { value: 'fade', label: '淡出淡入效果(fade)' },\r\n            { value: 'zoom', label: '缩放效果(zoom)' },\r\n            { value: 'rotate', label: '旋转效果(rotate)' },\r\n            { value: 'door', label: '开关门效果(door)' },\r\n            { value: 'flip', label: '翻转效果(flip)' },\r\n            { value: 'moveUp', label: '移出移入效果(moveUp)' },\r\n            { value: 'moveDown', label: '移出移入效果(moveDown)' },\r\n            { value: 'moveLeft', label: '移出移入效果(moveLeft)' },\r\n            { value: 'moveRight', label: '移出移入效果(moveRight)' },\r\n            { value: 'slideUp', label: '滑出滑入效果(slideUp)' },\r\n            { value: 'slideDown', label: '滑出滑入效果(slideDown)' },\r\n            { value: 'slideLeft', label: '滑出滑入效果(slideLeft)' },\r\n            { value: 'slideRight', label: '滑出滑入效果(slideRight)' },\r\n          ]}\r\n          onOk={(selected) => setAnimationType(selected[0].value)}\r\n        />\r\n      </Cell>\r\n      <Cell title=\"触发方式\">\r\n        <Select\r\n          value={trigger}\r\n          dataSource={[\r\n            { value: 'click', label: '点击状态触发(click)' },\r\n            { value: 'focus', label: '聚焦状态触发(focus)' },\r\n            { value: 'hover', label: '鼠标经过触发(hover)' },\r\n            { value: 'manual', label: '受控触发(manual)' },\r\n            { value: 'contextMenu', label: '右键触发(contextMenu)' },\r\n          ]}\r\n          onOk={(selected) => {\r\n            setTrigger(selected[0].value);\r\n            setVisible(false);\r\n          }}\r\n        />\r\n      </Cell>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 自定义箭头\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { Cell, Button, Popper, Radio, Message, Icon } from 'zson-mobile';\r\n\r\nconst Demo = () => {\r\n  const [arrowPointAtCenter, setArrowPointAtCenter] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Cell\r\n        description={\r\n          <Radio.Group\r\n            compact\r\n            type=\"button\"\r\n            value={arrowPointAtCenter}\r\n            onChange={setArrowPointAtCenter}\r\n          >\r\n            <Radio value={false}>跟随方向</Radio>\r\n            <Radio value={true}>元素中心</Radio>\r\n          </Radio.Group>\r\n        }\r\n      >\r\n        箭头位置\r\n      </Cell>\r\n      <Cell className=\"direction-demo\">\r\n        <div>\r\n          <div style={{ marginLeft: 60 }}>\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"topLeft\"\r\n              content=\"topLeft text\"\r\n            >\r\n              <Button size=\"xs\">TL</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"top\"\r\n              content=\"top text\"\r\n            >\r\n              <Button size=\"xs\">Top</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"topRight\"\r\n              content=\"topRight text\"\r\n            >\r\n              <Button size=\"xs\">TR</Button>\r\n            </Popper>\r\n          </div>\r\n\r\n          <div style={{ width: 60, float: 'left', clear: 'both' }}>\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"leftTop\"\r\n              content=\"leftTop text\"\r\n            >\r\n              <Button size=\"xs\">LT</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"left\"\r\n              content=\"left text\"\r\n            >\r\n              <Button size=\"xs\">Left</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"leftBottom\"\r\n              content=\"leftBottom text\"\r\n            >\r\n              <Button size=\"xs\">LB</Button>\r\n            </Popper>\r\n          </div>\r\n\r\n          <div style={{ width: 60, marginLeft: 60 * 4 + 20 }}>\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"rightTop\"\r\n              content=\"rightTop text\"\r\n            >\r\n              <Button size=\"xs\">RT</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"right\"\r\n              content=\"right text\"\r\n            >\r\n              <Button size=\"xs\">Right</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"rightBottom\"\r\n              content=\"rightBottom text\"\r\n            >\r\n              <Button size=\"xs\">RB</Button>\r\n            </Popper>\r\n          </div>\r\n\r\n          <div style={{ marginLeft: 60, clear: 'both' }}>\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"bottomLeft\"\r\n              content=\"bottomLeft text\"\r\n            >\r\n              <Button size=\"xs\">BL</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"bottom\"\r\n              content=\"bottom text\"\r\n            >\r\n              <Button size=\"xs\">Bottom</Button>\r\n            </Popper>\r\n\r\n            <Popper\r\n              arrowPointAtCenter={arrowPointAtCenter}\r\n              className=\"custom-arrow-content\"\r\n              hasArrow\r\n              direction=\"bottomRight\"\r\n              content=\"bottomRight text\"\r\n            >\r\n              <Button size=\"xs\">BR</Button>\r\n            </Popper>\r\n          </div>\r\n\r\n          <Message theme=\"warning\" icon={<Icon type=\"warning-round\" />}>\r\n            左右两侧显示位置不足会自动调整为反向显示\r\n          </Message>\r\n        </div>\r\n      </Cell>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性               | 类型                                 | 默认值                                 | 说明                                                                                                                                                                     |\r\n| :----------------- | :----------------------------------- | :------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| className          | string                               | -                                      | 气泡层类名追加                                                                                                                                                           |\r\n| content            | ReactNode                            | -                                      | 显示内容                                                                                                                                                                 |\r\n| hasArrow           | boolean                              | false                                  | 是否显示箭头节点<font color=\"red\">（注：需要自行定义箭头样式）</font>                                                                                                    |\r\n| destroy            | boolean                              | true                                   | 气泡层关闭后是否移除节点                                                                                                                                                 |\r\n| mountContainer     | HTMLElement &#124; () => HTMLElement | document.body                          | 指定 Popper 挂载的 HTML 节点                                                                                                                                             |\r\n| animationType      | string                               | 'zoomFade'                             | 可选值 `zoomFade`, `menuSlide`, `fade`, `door`, `flip`, `rotate`, `zoom`,`moveUp`, `moveDown`, `moveLeft`, `moveRight`,`slideUp`, `slideDown`, `slideLeft`, `slideRight` |\r\n| animationDuration  | number                               | 200                                    | 动画执行时间（单位：毫秒）                                                                                                                                               |\r\n| arrowPointAtCenter | boolean                              | false                                  | 箭头是否指向目标元素中心                                                                                                                                                 |\r\n| mouseEnterDelay    | number                               | 100                                    | 鼠标移入显示气泡层的延时时间（单位：毫秒）                                                                                                                               |\r\n| mouseLeaveDelay    | number                               | 100                                    | 鼠标移出隐藏气泡层的延时时间（单位：毫秒）                                                                                                                               |\r\n| direction          | string                               | 'top'                                  | 显示方向，可选值 `topLeft`、`top`、`topRight`、`rightTop`、`right`、`rightBottom`、`bottomLeft`、`bottom`、`bottomRight`、`leftTop`、`left`、`leftBottom`                |\r\n| trigger            | string                               | 移动端为'click' <br /> 桌面端为'hover' | 触发方式，可选值为：`click` 点击触发状态、`hover` 鼠标经过触发、`focus` 聚焦状态触发、`manual` 受控触发、`contextMenu` 右键触发                                          |\r\n| visible            | boolean                              | false                                  | 是否显示，`trigger='manual'` 时有效                                                                                                                                      |\r\n| onVisibleChange    | (visible?: boolean) => void          | () => {}                               | 显示/隐藏 气泡层触发的事件                                                                                                                                               |\r\n"}}]);