{"version":3,"sources":["webpack://site/../zson-mobile/src/picker/demo.md"],"names":[],"mappings":"0GAAA","file":"js/2517.c3dd9d58.js","sourcesContent":["export default \"# Picker 选择器\\r\\n\\r\\n## 基本用法\\r\\n\\r\\n```jsx\\r\\nimport { useEffect, useRef, useReducer } from 'react';\\r\\nimport { Cell, Button, Picker, Toast } from 'zson-mobile';\\r\\n\\r\\nconst SINGLE_DATA = [\\r\\n  { value: '1', label: '选项一' },\\r\\n  { value: '2', label: '选项二' },\\r\\n  { value: '3', label: '选项三' },\\r\\n  { value: '4', label: '选项四' },\\r\\n  { value: '5', label: '选项五' },\\r\\n];\\r\\n\\r\\n// 普通多列数据\\r\\nconst MULTI_DATA = [\\r\\n  [\\r\\n    { value: '1', label: '选项一' },\\r\\n    { value: '2', label: '选项二' },\\r\\n  ],\\r\\n  [\\r\\n    { value: '3', label: '选项A' },\\r\\n    { value: '4', label: '选项B' },\\r\\n  ],\\r\\n];\\r\\n\\r\\n// 级联数据\\r\\nconst CASCADE_DATA = [\\r\\n  {\\r\\n    value: '1',\\r\\n    label: '北京市',\\r\\n    children: [\\r\\n      { value: '11', label: '海淀区' },\\r\\n      { value: '12', label: '西城区' },\\r\\n    ],\\r\\n  },\\r\\n  {\\r\\n    value: '2',\\r\\n    label: '上海市',\\r\\n    children: [\\r\\n      { value: '21', label: '杨浦区' },\\r\\n      { value: '22', label: '静安区' },\\r\\n    ],\\r\\n  },\\r\\n];\\r\\n\\r\\n// 自定义\\r\\nconst DIY_DATA = [\\r\\n  {\\r\\n    code: '1',\\r\\n    name: '北京市',\\r\\n    children: [\\r\\n      { code: '11', name: '海淀区' },\\r\\n      { code: '12', name: '西城区' },\\r\\n    ],\\r\\n  },\\r\\n  {\\r\\n    code: '2',\\r\\n    name: '上海市',\\r\\n    children: [\\r\\n      { code: '21', name: '黄埔区' },\\r\\n      { code: '22', name: '虹口区' },\\r\\n    ],\\r\\n  },\\r\\n];\\r\\n\\r\\nconst initState = {\\r\\n  single: {\\r\\n    visible: false,\\r\\n    value: '',\\r\\n    dataSource: SINGLE_DATA,\\r\\n  },\\r\\n  multi: {\\r\\n    visible: false,\\r\\n    value: [],\\r\\n    dataSource: MULTI_DATA,\\r\\n  },\\r\\n  cascade: {\\r\\n    visible: false,\\r\\n    value: [],\\r\\n    dataSource: CASCADE_DATA,\\r\\n  },\\r\\n  diy: {\\r\\n    visible: false,\\r\\n    value: [],\\r\\n    dataSource: [],\\r\\n  },\\r\\n  specDOM: {\\r\\n    visible: false,\\r\\n    value: '',\\r\\n    dataSource: SINGLE_DATA,\\r\\n  },\\r\\n};\\r\\n\\r\\nconst reducer = (state, action) => {\\r\\n  const { type, key, value, valueMember, dataSource } = action;\\r\\n\\r\\n  switch (type) {\\r\\n    case 'visible':\\r\\n      return {\\r\\n        ...state,\\r\\n        [key]: {\\r\\n          ...state[key],\\r\\n          visible: !state[key].visible,\\r\\n        },\\r\\n      };\\r\\n\\r\\n    case 'value':\\r\\n      return {\\r\\n        ...state,\\r\\n        [key]: {\\r\\n          ...state[key],\\r\\n          value,\\r\\n        },\\r\\n      };\\r\\n\\r\\n    case 'valueMember':\\r\\n      return {\\r\\n        ...state,\\r\\n        [key]: {\\r\\n          ...state[key],\\r\\n          valueMember,\\r\\n        },\\r\\n      };\\r\\n\\r\\n    case 'dataSource':\\r\\n      return {\\r\\n        ...state,\\r\\n        [key]: {\\r\\n          ...state[key],\\r\\n          dataSource,\\r\\n        },\\r\\n      };\\r\\n\\r\\n    default:\\r\\n  }\\r\\n};\\r\\n\\r\\nconst Demo = () => {\\r\\n  const myRef = useRef();\\r\\n  const [state, dispatch] = useReducer(reducer, initState);\\r\\n\\r\\n  const setVisible = (key) => {\\r\\n    dispatch({ type: 'visible', key });\\r\\n  };\\r\\n\\r\\n  const setValue = (key, value) => {\\r\\n    dispatch({ type: 'value', key, value });\\r\\n  };\\r\\n\\r\\n  const setValueMember = (key, value) => {\\r\\n    dispatch({ type: 'valueMember', key, valueMember: value });\\r\\n  };\\r\\n\\r\\n  const setDataSource = (key, value) => {\\r\\n    dispatch({ type: 'dataSource', key, dataSource: value });\\r\\n  };\\r\\n\\r\\n  useEffect(() => {\\r\\n    // 异步加载数据源测试\\r\\n    setTimeout(() => {\\r\\n      setValue('diy', ['1', '12']);\\r\\n      setDataSource('diy', DIY_DATA);\\r\\n      setValueMember('diy', 'code');\\r\\n    }, 0);\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <Cell\\r\\n        description={\\r\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('single')}>\\r\\n            选择\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        单列\\r\\n      </Cell>\\r\\n\\r\\n      <Cell\\r\\n        description={\\r\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('multi')}>\\r\\n            选择\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        多列\\r\\n      </Cell>\\r\\n\\r\\n      <Cell\\r\\n        description={\\r\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('cascade')}>\\r\\n            选择\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        级联\\r\\n      </Cell>\\r\\n\\r\\n      <Cell\\r\\n        description={\\r\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('diy')}>\\r\\n            选择\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        自定义\\r\\n      </Cell>\\r\\n\\r\\n      <Cell\\r\\n        description={\\r\\n          <Button size=\\\"xs\\\" onClick={() => setVisible('specDOM')}>\\r\\n            选择\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        挂载到指定dom节点\\r\\n      </Cell>\\r\\n\\r\\n      <Picker\\r\\n        visible={state.single.visible}\\r\\n        value={state.single.value}\\r\\n        dataSource={state.single.dataSource}\\r\\n        onOk={(selected) => {\\r\\n          console.log('Single Picker onOk: ', selected);\\r\\n          Toast.show(JSON.stringify(selected));\\r\\n          setValue(\\r\\n            'single',\\r\\n            selected.map((item) => item.value),\\r\\n          );\\r\\n          setVisible('single');\\r\\n        }}\\r\\n        onCancel={() => setVisible('single')}\\r\\n      />\\r\\n\\r\\n      <Picker\\r\\n        visible={state.multi.visible}\\r\\n        value={state.multi.value}\\r\\n        dataSource={state.multi.dataSource}\\r\\n        onOk={(selected) => {\\r\\n          console.log('Multi Picker onOk: ', selected);\\r\\n          Toast.show(JSON.stringify(selected));\\r\\n          setValue(\\r\\n            'multi',\\r\\n            selected.map((item) => item.value),\\r\\n          );\\r\\n          setVisible('multi');\\r\\n        }}\\r\\n        onCancel={() => setVisible('multi')}\\r\\n      />\\r\\n\\r\\n      <Picker\\r\\n        visible={state.cascade.visible}\\r\\n        value={state.cascade.value}\\r\\n        dataSource={state.cascade.dataSource}\\r\\n        onOk={(selected) => {\\r\\n          console.log('Cascade Picker onOk: ', selected);\\r\\n          Toast.show(JSON.stringify(selected));\\r\\n          setValue(\\r\\n            'cascade',\\r\\n            selected.map((item) => item.value),\\r\\n          );\\r\\n          setVisible('cascade');\\r\\n        }}\\r\\n        onCancel={() => setVisible('cascade')}\\r\\n      />\\r\\n\\r\\n      <Picker\\r\\n        visible={state.diy.visible}\\r\\n        title=\\\"custom title\\\"\\r\\n        cancelText=\\\"Cancel\\\"\\r\\n        okText=\\\"Ok\\\"\\r\\n        dataSource={state.diy.dataSource}\\r\\n        value={state.diy.value}\\r\\n        valueMember={state.diy.valueMember}\\r\\n        itemRender={(data) => data.name}\\r\\n        onOk={(selected) => {\\r\\n          console.log('DIY Picker onOk: ', selected);\\r\\n          Toast.show(JSON.stringify(selected));\\r\\n          setValue(\\r\\n            'diy',\\r\\n            selected.map((item) => item.code),\\r\\n          );\\r\\n          setVisible('diy');\\r\\n        }}\\r\\n        onCancel={() => setVisible('diy')}\\r\\n      />\\r\\n\\r\\n      <Picker\\r\\n        visible={state.specDOM.visible}\\r\\n        value={state.specDOM.value}\\r\\n        dataSource={state.specDOM.dataSource}\\r\\n        onOk={(selected) => {\\r\\n          console.log('Picker onOk: ', selected);\\r\\n          Toast.show(JSON.stringify(selected));\\r\\n          setValue(\\r\\n            'specDOM',\\r\\n            selected.map((item) => item.value),\\r\\n          );\\r\\n          setVisible('specDOM');\\r\\n        }}\\r\\n        onCancel={() => setVisible('specDOM')}\\r\\n        mountContainer={() => myRef.current}\\r\\n      />\\r\\n\\r\\n      <div id=\\\"test-div\\\" style={{ position: 'relative', zIndex: 1 }} ref={myRef} />\\r\\n    </>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## Select 表单选择器\\r\\n\\r\\n```jsx\\r\\nimport { useState, useEffect } from 'react';\\r\\nimport { Select, Cell } from 'zson-mobile';\\r\\n\\r\\n// 级联数据\\r\\nconst CASCADE_DATA = [\\r\\n  {\\r\\n    value: '1',\\r\\n    label: '北京市',\\r\\n    children: [\\r\\n      { value: '11', label: '海淀区' },\\r\\n      { value: '12', label: '西城区' },\\r\\n    ],\\r\\n  },\\r\\n  {\\r\\n    value: '2',\\r\\n    label: '上海市',\\r\\n    children: [\\r\\n      { value: '21', label: '杨浦区' },\\r\\n      { value: '22', label: '静安区' },\\r\\n    ],\\r\\n  },\\r\\n];\\r\\n\\r\\nconst Demo = () => {\\r\\n  const [value, setValue] = useState([]);\\r\\n  const [dataSource, setDataSource] = useState([]);\\r\\n  const [wheelDefaultValue, setWheelDefaultValue] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    setTimeout(() => {\\r\\n      setDataSource(CASCADE_DATA);\\r\\n      setWheelDefaultValue(['1', '12']);\\r\\n    }, 0);\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Cell title=\\\"城市\\\">\\r\\n      <Select\\r\\n        value={value}\\r\\n        wheelDefaultValue={wheelDefaultValue}\\r\\n        dataSource={dataSource}\\r\\n        onOk={(selected) => {\\r\\n          console.log('Select onOk: ', selected);\\r\\n          setValue(selected.map((item) => item.value));\\r\\n        }}\\r\\n      />\\r\\n    </Cell>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## PickerView 平铺选择器\\r\\n\\r\\n```jsx\\r\\nimport { useState, useEffect } from 'react';\\r\\nimport { PickerView } from 'zson-mobile';\\r\\n\\r\\n// 级联数据\\r\\nconst CASCADE_DATA = [\\r\\n  {\\r\\n    code: '1',\\r\\n    label: '北京市',\\r\\n    children: [\\r\\n      { code: '11', label: '海淀区' },\\r\\n      { code: '12', label: '西城区' },\\r\\n    ],\\r\\n  },\\r\\n  {\\r\\n    code: '2',\\r\\n    label: '上海市',\\r\\n    children: [\\r\\n      { code: '21', label: '杨浦区' },\\r\\n      { code: '22', label: '静安区' },\\r\\n    ],\\r\\n  },\\r\\n];\\r\\n\\r\\nconst Demo = () => {\\r\\n  const [value, setValue] = useState([]);\\r\\n  const [dataSource, setDataSource] = useState([]);\\r\\n  const [valueMember, setValueMember] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    setTimeout(() => {\\r\\n      setValue(['1', '12']);\\r\\n      setValueMember('code');\\r\\n      setDataSource(CASCADE_DATA);\\r\\n    }, 0);\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <PickerView\\r\\n      value={value}\\r\\n      valueMember={valueMember}\\r\\n      dataSource={dataSource}\\r\\n      onChange={(selected) => {\\r\\n        console.log('PickerView onChange: ', selected);\\r\\n        setValue(selected.map((item) => item.code));\\r\\n      }}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## API\\r\\n\\r\\n| 属性              | 类型                                                                                                            | 默认值               | 说明                   |\\r\\n| :---------------- | :-------------------------------------------------------------------------------------------------------------- | :------------------- | :--------------------- |\\r\\n| dataSource        | DataSource<T = { label: string; value: string \\\\| number \\\\| boolean }> = Array<T & { children?: DataSource<T> }> | []                   | 数据源                 |\\r\\n| value             | string \\\\| number \\\\| boolean \\\\| Array<string &#124; number &#124; boolean>                                       | -                    | 值                     |\\r\\n| defaultValue      | string \\\\| number \\\\| boolean \\\\| Array<string &#124; number &#124; boolean>                                       | -                    | 初始值                 |\\r\\n| wheelDefaultValue | string \\\\| number \\\\| boolean \\\\| Array<string &#124; number &#124; boolean>                                       | -                    | 滚轮初始停留的位置     |\\r\\n| valueMember       | string                                                                                                          | 'value'              | 值字段对应的 key       |\\r\\n| itemRender        | (data?: { [key: string]: string &#124; number &#124; boolean }) => ReactNode                                    | (data) => data.label | 单个选项的展示         |\\r\\n| disabled          | boolean                                                                                                         | false                | 是否禁用               |\\r\\n| cols              | number                                                                                                          | Infinity             | 级联选择器的级数       |\\r\\n| onChange          | (selected?: Array<{ [key: string]: string &#124; number &#124; boolean }>) => void                              | -                    | 值变化时触发的回调函数 |\\r\\n\\r\\n### 仅 Picker & Select 支持的属性\\r\\n\\r\\n| 属性           | 类型                                                                               | 默认值        | 说明                                           |\\r\\n| :------------- | :--------------------------------------------------------------------------------- | :------------ | :--------------------------------------------- |\\r\\n| title          | string                                                                             | '请选择'      | 选择器标题                                     |\\r\\n| okText         | string                                                                             | '确定'        | 确定栏文字                                     |\\r\\n| cancelText     | string                                                                             | '取消'        | 取消栏文字                                     |\\r\\n| maskClosable   | boolean                                                                            | true          | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\\r\\n| destroy        | boolean                                                                            | false         | 弹层关闭后是否移除节点                         |\\r\\n| onOk           | (selected?: Array<{ [key: string]: string &#124; number &#124; boolean }>) => void | -             | 点击确定时触发的回调函数                       |\\r\\n| onCancel       | () => void                                                                         | -             | 点击取消时触发的回调函数                       |\\r\\n| mountContainer | HTMLElement &#124; () => HTMLElement                                               | document.body | 指定 Picker 挂载的 HTML 节点                   |\\r\\n\\r\\n### 仅 Picker 支持的属性\\r\\n\\r\\n| 属性    | 类型    | 默认值 | 说明     |\\r\\n| :------ | :------ | :----- | :------- |\\r\\n| visible | boolean | false  | 是否展示 |\\r\\n\\r\\n### 仅 Select 支持的属性\\r\\n\\r\\n| 属性          | 类型                                                                                    | 默认值                                       | 说明         |\\r\\n| :------------ | :-------------------------------------------------------------------------------------- | :------------------------------------------- | :----------- |\\r\\n| placeholder   | string                                                                                  | '请选择'                                     | 输入提示信息 |\\r\\n| hasArrow      | boolean                                                                                 | true                                         | 是否显示箭头 |\\r\\n| displayRender | (selected?: Array<{ [key: string]: string &#124; number &#124; boolean }>) => ReactNode | selected => selected.map(item => item.label) | 所选值的展示 |\\r\\n\";"],"sourceRoot":""}