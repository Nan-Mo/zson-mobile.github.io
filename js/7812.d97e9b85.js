(self.webpackChunksite=self.webpackChunksite||[]).push([[7812],{37812:function(n,r,e){"use strict";e.r(r),r.default="# Modal 模态框\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useRef, useReducer } from 'react';\r\nimport { Modal, Cell, Button, Select } from 'zson-mobile';\r\n\r\nconst initState = {\r\n  normal: {\r\n    visible: false,\r\n  },\r\n  hasFooter: {\r\n    visible: false,\r\n  },\r\n  closable: {\r\n    visible: false,\r\n  },\r\n  onlyBody: {\r\n    visible: false,\r\n  },\r\n  animation: {\r\n    visible: false,\r\n    animationType: 'fade',\r\n  },\r\n  customContainer: {\r\n    visible: false,\r\n  },\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const { type, key, animationType } = action;\r\n\r\n  switch (type) {\r\n    case 'visible':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...state[key],\r\n          visible: !state[key].visible,\r\n        },\r\n      };\r\n\r\n    case 'animation':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...state[key],\r\n          animationType,\r\n        },\r\n      };\r\n\r\n    default:\r\n  }\r\n};\r\n\r\nconst Demo = () => {\r\n  const myRef = useRef();\r\n  const [state, dispatch] = useReducer(reducer, initState);\r\n\r\n  const toggle = (key) => dispatch({ type: 'visible', key });\r\n\r\n  return (\r\n    <>\r\n      <Cell\r\n        description={\r\n          <Button size=\"xs\" onClick={() => toggle('normal')}>\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        普通\r\n      </Cell>\r\n\r\n      <Cell\r\n        description={\r\n          <Button size=\"xs\" onClick={() => toggle('hasFooter')}>\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        有底部按钮\r\n      </Cell>\r\n\r\n      <Cell\r\n        description={\r\n          <Button size=\"xs\" onClick={() => toggle('closable')}>\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        遮罩层可关闭\r\n      </Cell>\r\n\r\n      <Cell\r\n        description={\r\n          <Button size=\"xs\" onClick={() => toggle('onlyBody')}>\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        无头部，无底部\r\n      </Cell>\r\n\r\n      <Cell\r\n        title=\"动画效果\"\r\n        description={\r\n          <Button size=\"xs\" onClick={() => toggle('animation')}>\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        <Select\r\n          value={state.animation.animationType}\r\n          dataSource={[\r\n            { value: 'fade', label: '淡出淡入效果(fade)' },\r\n            { value: 'zoom', label: '缩放效果(zoom)' },\r\n            { value: 'rotate', label: '旋转效果(rotate)' },\r\n            { value: 'door', label: '开关门效果(door)' },\r\n            { value: 'flip', label: '翻转效果(flip)' },\r\n            { value: 'moveUp', label: '移出移入效果(moveUp)' },\r\n            { value: 'moveDown', label: '移出移入效果(moveDown)' },\r\n            { value: 'moveLeft', label: '移出移入效果(moveLeft)' },\r\n            { value: 'moveRight', label: '移出移入效果(moveRight)' },\r\n            { value: 'slideUp', label: '滑出滑入效果(slideUp)' },\r\n            { value: 'slideDown', label: '滑出滑入效果(slideDown)' },\r\n            { value: 'slideLeft', label: '滑出滑入效果(slideLeft)' },\r\n            { value: 'slideRight', label: '滑出滑入效果(slideRight)' },\r\n          ]}\r\n          onOk={(selected) => {\r\n            dispatch({\r\n              type: 'animation',\r\n              key: 'animation',\r\n              animationType: selected.map((item) => item.value),\r\n            });\r\n          }}\r\n        />\r\n      </Cell>\r\n\r\n      <Cell\r\n        description={\r\n          <Button size=\"xs\" onClick={() => toggle('customContainer')}>\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        挂载到指定dom节点\r\n      </Cell>\r\n\r\n      <div id=\"test-div\" style={{ position: 'relative', zIndex: 1 }} ref={myRef} />\r\n\r\n      <Modal visible={state.normal.visible} title=\"标题\" closable onCancel={() => toggle('normal')}>\r\n        模态框内容\r\n      </Modal>\r\n\r\n      <Modal\r\n        title=\"标题\"\r\n        visible={state.hasFooter.visible}\r\n        footer={\r\n          <Button block theme=\"primary\" onClick={() => toggle('hasFooter')}>\r\n            确认\r\n          </Button>\r\n        }\r\n      >\r\n        <p>模态框内容</p>\r\n      </Modal>\r\n\r\n      <Modal\r\n        visible={state.closable.visible}\r\n        title=\"标题\"\r\n        maskClosable\r\n        onCancel={() => toggle('closable')}\r\n      >\r\n        点击遮罩层关闭\r\n      </Modal>\r\n\r\n      <Modal visible={state.onlyBody.visible} maskClosable onCancel={() => toggle('onlyBody')}>\r\n        无头部，无底部\r\n      </Modal>\r\n\r\n      <Modal\r\n        visible={state.animation.visible}\r\n        animationType={state.animation.animationType}\r\n        maskClosable\r\n        onCancel={() => toggle('animation')}\r\n      >\r\n        <div style={{ height: 100 }}>\r\n          当前使用的动画类型animationType：'{state.animation.animationType}'\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        visible={state.customContainer.visible}\r\n        maskClosable\r\n        onCancel={() => toggle('customContainer')}\r\n        mountContainer={() => myRef.current}\r\n      >\r\n        挂载到指定dom节点\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 警告框 Alert\r\n\r\n```jsx\r\nimport { Cell, Button, Modal } from 'zson-mobile';\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <>\r\n      <Cell\r\n        description={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={() => {\r\n              const modal = Modal.alert({\r\n                className: 'test',\r\n                title: '静态调用的title',\r\n                content: '静态调用的body',\r\n                onCancel: () => {\r\n                  modal.hide();\r\n                },\r\n              });\r\n            }}\r\n          >\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        静态调用（静态关闭）\r\n      </Cell>\r\n\r\n      <Cell\r\n        description={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={() => {\r\n              const modal = Modal.alert({\r\n                title: '静态调用的title',\r\n                content: '静态调用的body，使用promise关闭',\r\n                onCancel: () => {\r\n                  return new Promise((resolve, reject) => {\r\n                    resolve();\r\n                    // setTimeout(Math.random() > 0.5 ? resolve : reject, 500);\r\n                  }).catch(() => {\r\n                    window.alert('出错啦，弹窗无法关闭，继续点击试试');\r\n                    return false; // 返回false，可使弹窗无法关闭\r\n                  });\r\n                },\r\n              });\r\n            }}\r\n          >\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        静态调用（使用promise关闭）\r\n      </Cell>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 确认框 Confirm\r\n\r\n```jsx\r\nimport { Cell, Button, Modal } from 'zson-mobile';\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <>\r\n      <Cell\r\n        description={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={() => {\r\n              const modal = Modal.confirm({\r\n                title: '确认信息',\r\n                content: '静态调用的body',\r\n                onCancel: () => {\r\n                  console.log('点击cancel');\r\n                },\r\n                onOk: () => {\r\n                  console.log('点击ok');\r\n                },\r\n              });\r\n            }}\r\n          >\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        静态调用（静态关闭）\r\n      </Cell>\r\n\r\n      <Cell\r\n        description={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={() => {\r\n              const modal = Modal.confirm({\r\n                title: '静态调用的title',\r\n                content: '静态调用的body，使用promise关闭',\r\n                onCancel: () => {\r\n                  return new Promise((resolve, reject) => {\r\n                    resolve();\r\n                    // setTimeout(Math.random() > 0.5 ? resolve : reject, 500);\r\n                  }).catch(() => {\r\n                    window.alert('出错啦，弹窗无法关闭，继续点击试试');\r\n                    return false; // 返回false，可使弹窗无法关闭\r\n                  });\r\n                },\r\n              });\r\n            }}\r\n          >\r\n            开启\r\n          </Button>\r\n        }\r\n      >\r\n        静态调用（使用promise关闭）\r\n      </Cell>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性              | 类型                                 | 默认值        | 说明                                                                                                                                                      |\r\n| :---------------- | :----------------------------------- | :------------ | :-------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| shape             | string                               | 'radius'      | 形状，可选值 `rect`、`radius`                                                                                                                             |\r\n| visible           | boolean                              | false         | 是否显示                                                                                                                                                  |\r\n| animationType     | string                               | 'fade'        | 动画效果，可选值 `fade`, `door`, `flip`, `rotate`, `zoom`,`moveUp`, `moveDown`, `moveLeft`, `moveRight`,`slideUp`, `slideDown`, `slideLeft`, `slideRight` |\r\n| animationDuration | number                               | 200           | 动画执行时间（单位：毫秒）                                                                                                                                |\r\n| width             | string &#124; number                 | '70%'         | 宽度                                                                                                                                                      |\r\n| mask              | boolean                              | true          | 是否展示遮罩层                                                                                                                                            |\r\n| maskType          | string                               | 'normal'      | 遮罩层的类型，可选值 `transparent`, `normal`                                                                                                              |\r\n| maskClosable      | boolean                              | false         | 是否点击遮罩层时关闭，需要和 onCancel 一起使用                                                                                                            |\r\n| closable          | boolean                              | false         | 右上角是否显示关闭按钮，需要和 onCancel 一起使用                                                                                                          |\r\n| onCancel          | () => void                           | -             | 如果 maskClosable 或 closable 为 true，那么点击遮罩或者右上角关闭按钮会调用此函数                                                                         |\r\n| title             | ReactNode                            | -             | 标题                                                                                                                                                      |\r\n| footer            | ReactNode                            | -             | 弹窗底部内容                                                                                                                                              |\r\n| destroy           | boolean                              | true          | 弹层关闭后是否移除节点                                                                                                                                    |\r\n| afterOpen         | () => void                           | -             | 模态框打开后的回调                                                                                                                                        |\r\n| afterClose        | () => void                           | -             | 模态框关闭后的回调                                                                                                                                        |\r\n| mountContainer    | HTMLElement &#124; () => HTMLElement | document.body | 指定 Modal 挂载的 HTML 节点                                                                                                                               |\r\n\r\n## 静态方法\r\n\r\n```js\r\n// 显示警告框，不传onCancel也可关闭，如需做更多操作，参考下方confirm的例子\r\nconst alert = Modal.alert({\r\n  title: '静态调用的title',\r\n  content: '静态调用的body',\r\n});\r\n\r\n// 显示确认框，若关闭时需要promise，onOk、onCancel均支持promise\r\nconst confirm = Modal.confirm({\r\n  title: '静态调用的title',\r\n  content: '静态调用的body，使用promise关闭',\r\n  onOk: () => {\r\n    return fetch.get('xxx.api').then((res) => {\r\n      if(res.code === 0) {\r\n        return true; // 关闭弹窗\r\n      } else {\r\n        return false; // 阻止弹窗关闭\r\n      }\r\n    }).catch(...);\r\n  }\r\n});\r\n\r\n```\r\n\r\n| 属性       | 类型       | 默认值                        | 说明                            |\r\n| :--------- | :--------- | :---------------------------- | :------------------------------ |\r\n| title      | ReactNode  | -                             | 弹出框的标题                    |\r\n| content    | ReactNode  | -                             | 弹出框的内容                    |\r\n| cancelText | ReactNode  | '关闭'(Alert)/'取消'(Confirm) | 取消按钮的内容                  |\r\n| okText     | ReactNode  | '确认'                        | 确认按钮的内容                  |\r\n| onOk       | () => void | -                             | 点击“确认”后的回调函数(Confirm) |\r\n| onCancel   | () => void | -                             | 点击“关闭/取消”后的回调函数     |\r\n"}}]);